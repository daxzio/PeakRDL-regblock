// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock
//
// This is a wrapper module that flattens the hwif structs into individual signals

module {{ds.module_name}}_wrapper
    {%- if cpuif.parameters %} #(
        {{",\n        ".join(cpuif.parameters)}}
    ) {%- endif %} (
        input wire clk,
        input wire {{default_resetsignal_name}},

        {%- for signal in ds.out_of_hier_signals.values() %}
        {%- if signal.width == 1 %}
        input wire {{kwf(signal.inst_name)}},
        {%- else %}
        input wire [{{signal.width-1}}:0] {{kwf(signal.inst_name)}},
        {%- endif %}
        {%- endfor %}

        {%- if ds.has_paritycheck %}

        output logic parity_error,
        {%- endif %}

        {{cpuif.port_declaration|indent(8)}}
        {%- if hwif.has_input_struct or hwif.has_output_struct %},{% endif %}

        {{hwif.get_flat_port_declarations()|indent(8)}}
    );

    //--------------------------------------------------------------------------
    // Internal hwif struct signals
    //--------------------------------------------------------------------------
{%- if hwif.has_input_struct %}
    {{ds.package_name}}::{{ds.top_node.inst_name}}__in_t hwif_in;
{%- endif %}
{%- if hwif.has_output_struct %}
    {{ds.package_name}}::{{ds.top_node.inst_name}}__out_t hwif_out;
{%- endif %}

    //--------------------------------------------------------------------------
    // Flatten struct to individual signals
    //--------------------------------------------------------------------------
{{hwif.get_flat_signal_assignments()|indent(4, True)}}

    //--------------------------------------------------------------------------
    // Instantiate the main regblock module
    //--------------------------------------------------------------------------
    {{ds.module_name}}
    {%- if cpuif.parameters %} #(
        {{",\n        ".join(cpuif.parameters)}}
    ) {%- endif %} i_{{ds.module_name}} (
        .clk(clk),
        .{{default_resetsignal_name}}({{default_resetsignal_name}}),

        {%- for signal in ds.out_of_hier_signals.values() %}
        .{{kwf(signal.inst_name)}}({{kwf(signal.inst_name)}}),
        {%- endfor %}

        {%- if ds.has_paritycheck %}
        .parity_error(parity_error),
        {%- endif %}

        {{cpuif.get_wrapper_port_connections()|indent(8)}}
        {%- if hwif.has_input_struct or hwif.has_output_struct %},{% endif %}

        {%- if hwif.has_input_struct %}
        .hwif_in(hwif_in)
        {%- endif %}
        {%- if hwif.has_input_struct and hwif.has_output_struct %},{% endif %}
        {%- if hwif.has_output_struct %}
        .hwif_out(hwif_out)
        {%- endif %}
    );

endmodule
{# (eof newline anchor) #}

